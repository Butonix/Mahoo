{"version":3,"file":"699a548a676eaeba767d.js","sources":["webpack:///./components/editor/plugin/image/ui.js"],"sourcesContent":["/**\n * Class for working with UI:\n *  - rendering base structure\n *  - show/hide preview\n *  - apply tune view\n */\nexport default class Ui {\n  /**\n   * @param {object} api - Editor.js API\n   * @param {ImageConfig} config - user config\n   * @param {function} onSelectFile - callback for clicks on Select file buttor\n   */\n  constructor({ api, config, onSelectFile }) {\n    this.api = api\n    this.config = config\n    this.onSelectFile = onSelectFile\n    this.nodes = {\n      wrapper: make('div', [this.CSS.baseClass, this.CSS.wrapper]),\n      imageContainer: make('div', [ this.CSS.imageContainer ]),\n      fileButton: this.createFileButton(),\n      imageEl: undefined,\n      imagePreloader: make('div', this.CSS.imagePreloader),\n      caption: make('div', [this.CSS.input, this.CSS.caption], {\n        contentEditable: true\n      })\n    }\n\n    /**\n     * Create base structure\n     *  <wrapper>\n     *    <image-container>\n     *      <image-preloader />\n     *    </image-container>\n     *    <caption />\n     *    <select-file-button />\n     *  </wrapper>\n     */\n    this.nodes.caption.dataset.placeholder = this.config.captionPlaceholder\n    this.nodes.imageContainer.appendChild(this.nodes.imagePreloader)\n    this.nodes.wrapper.appendChild(this.nodes.imageContainer)\n    this.nodes.wrapper.appendChild(this.nodes.caption)\n    this.nodes.wrapper.appendChild(this.nodes.fileButton)\n  }\n\n  /**\n   * CSS classes\n   * @constructor\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      loading: this.api.styles.loader,\n      input: this.api.styles.input,\n      button: this.api.styles.button,\n\n      /**\n       * Tool's classes\n       */\n      wrapper: 'image-tool',\n      imageContainer: 'image-tool__image',\n      imagePreloader: 'image-tool__image-preloader',\n      imageEl: 'image-tool__image-picture',\n      caption: 'image-tool__caption'\n    }\n  };\n\n  /**\n   * Ui statuses:\n   * - empty\n   * - uploading\n   * - filled\n   * @return {{EMPTY: string, UPLOADING: string, FILLED: string}}\n   */\n  static get status() {\n    return {\n      EMPTY: 'empty',\n      UPLOADING: 'loading',\n      FILLED: 'filled'\n    }\n  }\n\n  /**\n   * @param {ImageToolData} toolData\n   * @return {HTMLDivElement}\n   */\n  render(toolData) {\n    if (!toolData.file || Object.keys(toolData.file).length === 0) {\n      this.toggleStatus(Ui.status.EMPTY)\n    } else {\n      this.toggleStatus(Ui.status.UPLOADING)\n    }\n\n    return this.nodes.wrapper\n  }\n\n  /**\n   * Creates upload-file button\n   * @return {Element}\n   */\n  createFileButton() {\n    const button = make('div', [ this.CSS.button ])\n\n    button.innerHTML = this.config.buttonContent || `${'<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <path d=\"M3.15 13.628A7.749 7.749 0 0 0 10 17.75a7.74 7.74 0 0 0 6.305-3.242l-2.387-2.127-2.765 2.244-4.389-4.496-3.614 3.5zm-.787-2.303l4.446-4.371 4.52 4.63 2.534-2.057 3.533 2.797c.23-.734.354-1.514.354-2.324a7.75 7.75 0 1 0-15.387 1.325zM10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10z\"/>\\n' +\n    '</svg>'} 选择一张图片`\n\n    button.addEventListener('click', () => {\n      this.onSelectFile()\n    })\n\n    return button\n  }\n\n  /**\n   * Shows uploading preloader\n   * @param {string} src - preview source\n   */\n  showPreloader(src) {\n    this.nodes.imagePreloader.style.backgroundImage = `url(${src})`\n\n    this.toggleStatus(Ui.status.UPLOADING)\n  }\n\n  /**\n   * Hide uploading preloader\n   */\n  hidePreloader() {\n    this.nodes.imagePreloader.style.backgroundImage = ''\n    this.toggleStatus(Ui.status.EMPTY)\n  }\n\n  /**\n   * Shows an image\n   * @param {string} url\n   */\n  fillImage(url) {\n    /**\n     * Check for a source extension to compose element correctly: video tag for mp4, img — for others\n     */\n    const tag = /\\.mp4$/.test(url) ? 'VIDEO' : 'IMG'\n\n    const attributes = {\n      src: url\n    }\n\n    /**\n     * We use eventName variable because IMG and VIDEO tags have different event to be called on source load\n     * - IMG: load\n     * - VIDEO: loadeddata\n     * @type {string}\n     */\n    let eventName = 'load'\n\n    /**\n     * Update attributes and eventName if source is a mp4 video\n     */\n    if (tag === 'VIDEO') {\n      /**\n       * Add attributes for playing muted mp4 as a gif\n       * @type {boolean}\n       */\n      attributes.autoplay = true\n      attributes.loop = true\n      attributes.muted = true\n      attributes.playsinline = true\n\n      /**\n       * Change event to be listened\n       * @type {string}\n       */\n      eventName = 'loadeddata'\n    }\n\n    /**\n     * Compose tag with defined attributes\n     * @type {Element}\n     */\n    this.nodes.imageEl = make(tag, this.CSS.imageEl, attributes)\n\n    /**\n     * Add load event listener\n     */\n    this.nodes.imageEl.addEventListener(eventName, () => {\n      this.toggleStatus(Ui.status.FILLED)\n\n      /**\n       * Preloader does not exists on first rendering with presaved data\n       */\n      if (this.nodes.imagePreloader) {\n        this.nodes.imagePreloader.style.backgroundImage = ''\n      }\n    })\n\n    this.nodes.imageContainer.appendChild(this.nodes.imageEl)\n  }\n\n  /**\n   * Shows caption input\n   * @param {string} text - caption text\n   */\n  fillCaption(text) {\n    if (this.nodes.caption) {\n      this.nodes.caption.innerHTML = text\n    }\n  }\n\n  /**\n   * Changes UI status\n   * @param {string} status - see {@link Ui.status} constants\n   */\n  toggleStatus(status) {\n    for (const statusType in Ui.status) {\n      if (Ui.status.hasOwnProperty(statusType)) {\n        this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${Ui.status[statusType]}`, status === Ui.status[statusType])\n      }\n    }\n  }\n\n  /**\n   * Apply visual representation of activated tune\n   * @param {string} tuneName - one of available tunes {@link Tunes.tunes}\n   * @param {boolean} status - true for enable, false for disable\n   */\n  applyTune(tuneName, status) {\n    this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${tuneName}`, status)\n  }\n}\n\n/**\n * Helper for making Elements with attributes\n *\n * @param  {string} tagName           - new Element tag name\n * @param  {array|string} classNames  - list or name of CSS class\n * @param  {Object} attributes        - any attributes\n * @return {Element}\n */\nexport const make = function make(tagName, classNames = null, attributes = {}) {\n  const el = document.createElement(tagName)\n\n  if (Array.isArray(classNames)) {\n    el.classList.add(...classNames)\n  } else if (classNames) {\n    el.classList.add(classNames)\n  }\n\n  for (const attrName in attributes) {\n    el[attrName] = attributes[attrName]\n  }\n\n  return el\n}\n"],"mappings":";AAMA","sourceRoot":""}