{"version":3,"file":"765efb8d4824fcc92616.js","sources":["webpack:///./components/common/Affix.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nfunction getScroll(target, top) {\n  const prop = top ? 'pageYOffset' : 'pageXOffset'\n  const method = top ? 'scrollTop' : 'scrollLeft'\n\n  let ret = target[prop]\n\n  if (typeof ret !== 'number') {\n    ret = window.document.documentElement[method]\n  }\n\n  return ret\n}\n\nfunction getOffset(element) {\n  const rect = element.getBoundingClientRect()\n\n  const scrollTop = getScroll(window, true)\n  const scrollLeft = getScroll(window)\n\n  const docEl = window.document.body\n  const clientTop = docEl.clientTop || 0\n  const clientLeft = docEl.clientLeft || 0\n\n  return {\n    top: rect.top + scrollTop - clientTop,\n    left: rect.left + scrollLeft - clientLeft\n  }\n}\n\nexport default {\n  name: 'Affix',\n  props: {\n    top: {\n      type: Number,\n      default: 0\n    },\n    bottom: {\n      type: Number,\n      default: undefined\n    }\n  },\n  data() {\n    return {\n      affix: false,\n      styles: {},\n      slot: false,\n      slotStyle: {}\n    }\n  },\n  computed: {\n    offsetType() {\n      let type = 'top'\n      if (this.bottom >= 0) {\n        type = 'bottom'\n      }\n      return type\n    },\n    classes() {\n      return [\n        {\n          'v-affix': this.affix\n        }\n      ]\n    }\n  },\n  mounted() {\n    this.$utils.on(window, 'scroll', this.handleScroll)\n    this.$utils.on(window, 'resize', this.handleScroll)\n    this.$nextTick(() => {\n      this.handleScroll()\n    })\n  },\n  beforeDestroy() {\n    this.$utils.off(window, 'scroll', this.handleScroll)\n    this.$utils.off(window, 'resize', this.handleScroll)\n  },\n  methods: {\n    handleScroll() {\n      const affix = this.affix\n      const scrollTop = getScroll(window, true)\n      const elOffset = getOffset(this.$el)\n      const windowHeight = window.innerHeight\n      const elHeight = this.$el.getElementsByTagName('div')[0].offsetHeight\n\n      // Fixed Top\n      if ((elOffset.top - this.top) < scrollTop && this.offsetType === 'top' && !affix) {\n        this.affix = true\n        this.slotStyle = {\n          width: this.$refs.point.clientWidth + 'px',\n          height: this.$refs.point.clientHeight + 'px'\n        }\n        this.slot = true\n        this.styles = {\n          top: `${this.top}px`,\n          left: `${elOffset.left}px`,\n          width: `${this.$el.offsetWidth}px`\n        }\n\n        this.$emit('on-change', true)\n      } else if ((elOffset.top - this.top) > scrollTop && this.offsetType === 'top' && affix) {\n        this.slot = false\n        this.slotStyle = {}\n        this.affix = false\n        this.styles = null\n\n        this.$emit('on-change', false)\n      }\n\n      // Fixed Bottom\n      if ((elOffset.top + this.bottom + elHeight) > (scrollTop + windowHeight) && this.offsetType === 'bottom' && !affix) {\n        this.affix = true\n        this.styles = {\n          bottom: `${this.bottom}px`,\n          left: `${elOffset.left}px`,\n          width: `${this.$el.offsetWidth}px`\n        }\n\n        this.$emit('on-change', true)\n      } else if ((elOffset.top + this.bottom + elHeight) < (scrollTop + windowHeight) && this.offsetType === 'bottom' && affix) {\n        this.affix = false\n        this.styles = null\n\n        this.$emit('on-change', false)\n      }\n    }\n  }\n}\n"],"mappings":"AAiBA","sourceRoot":""}